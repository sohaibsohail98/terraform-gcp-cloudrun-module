name: Docker Build Validation - Hello World App

on:
  pull_request:
    branches: ["main"]
    paths:
      - "infra/dockerfile"
      - "src/**"
      - "public/**"
      - "package*.json"
      - "next.config.*"
      - "postcss.config.*"
      - "tsconfig.json"

env:
  IMAGE_NAME: hello-world-app
  GCP_REGION: europe-west2

jobs:
  docker-build-validation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image (No Push)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/hello-world-repo/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/docker-image.tar

      - name: Load Docker image for scanning
        run: docker load --input /tmp/docker-image.tar

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/hello-world-repo/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          format: "json"
          output: "trivy-results.json"

      - name: Run Trivy vulnerability scanner (Table)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/hello-world-repo/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          format: "table"
          output: "trivy-results.txt"

      - name: Analyze security scan results
        id: security-analysis
        run: |
          # Count vulnerabilities by severity
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
          MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
          LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json 2>/dev/null || echo "0")

          echo "CRITICAL_COUNT=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "HIGH_COUNT=${HIGH}" >> $GITHUB_OUTPUT
          echo "MEDIUM_COUNT=${MEDIUM}" >> $GITHUB_OUTPUT
          echo "LOW_COUNT=${LOW}" >> $GITHUB_OUTPUT

          # Create summary for PR comment
          SCAN_SUMMARY="üîç **Security Scan Results:**\n"
          SCAN_SUMMARY="${SCAN_SUMMARY}- üî¥ Critical: ${CRITICAL}\n"
          SCAN_SUMMARY="${SCAN_SUMMARY}- üü† High: ${HIGH}\n"
          SCAN_SUMMARY="${SCAN_SUMMARY}- üü° Medium: ${MEDIUM}\n"
          SCAN_SUMMARY="${SCAN_SUMMARY}- üü¢ Low: ${LOW}"

          echo "SCAN_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SCAN_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.json
            trivy-results.txt
          retention-days: 7

      - name: Get Docker image size
        id: size
        run: |
          # Debug: List all docker images
          echo "=== All Docker Images ==="
          docker images
          echo "========================"

          # Try multiple approaches to get the size
          IMAGE_TAG="pr-${{ github.event.number }}"
          FULL_IMAGE_NAME="${{ env.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/hello-world-repo/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"

          echo "Looking for image: ${FULL_IMAGE_NAME}"

          # Method 1: Try exact match
          SIZE=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep "${IMAGE_TAG}" | awk '{print $2}' | head -1)

          if [ -z "$SIZE" ]; then
            # Method 2: Try partial match on repository
            SIZE=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep "hello-world-app" | awk '{print $2}' | head -1)
          fi

          if [ -z "$SIZE" ]; then
            # Method 3: Get the most recent image size
            SIZE=$(docker images --format "{{.Size}}" | head -1)
          fi

          if [ -z "$SIZE" ]; then
            SIZE="Unknown"
          fi

          echo "Detected image size: ${SIZE}"
          echo "IMAGE_SIZE=${SIZE}" >> $GITHUB_OUTPUT

      - name: Generate Build Summary
        run: |
          echo "## üê≥ Docker Build Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Build Successful** - Dockerfile changes validated!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Build Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Size** | ${{ steps.size.outputs.IMAGE_SIZE }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | linux/amd64 |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Number** | #${{ github.event.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ Critical | ${{ steps.security-analysis.outputs.CRITICAL_COUNT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü† High | ${{ steps.security-analysis.outputs.HIGH_COUNT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° Medium | ${{ steps.security-analysis.outputs.MEDIUM_COUNT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü¢ Low | ${{ steps.security-analysis.outputs.LOW_COUNT }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add warning if critical vulnerabilities found
          if [ "${{ steps.security-analysis.outputs.CRITICAL_COUNT }}" -gt 0 ]; then
            echo "‚ö†Ô∏è **Warning:** Critical vulnerabilities detected. Please review before merging." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Download \`security-scan-results\` artifact for detailed vulnerability report" >> $GITHUB_STEP_SUMMARY
          echo "- Image will be built and deployed when PR is merged via the main deployment pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- Build validation only - no image pushed to registry" >> $GITHUB_STEP_SUMMARY

      - name: Print Security Summary to Logs
        run: |
          echo "=================================="
          echo "üê≥ DOCKER BUILD VALIDATION COMPLETE"
          echo "=================================="
          echo "‚úÖ Build Status: SUCCESS"
          echo "üì¶ Image Size: ${{ steps.size.outputs.IMAGE_SIZE }}"
          echo "üîç Security Scan Results:"
          echo "   üî¥ Critical: ${{ steps.security-analysis.outputs.CRITICAL_COUNT }}"
          echo "   üü† High: ${{ steps.security-analysis.outputs.HIGH_COUNT }}"
          echo "   üü° Medium: ${{ steps.security-analysis.outputs.MEDIUM_COUNT }}"
          echo "   üü¢ Low: ${{ steps.security-analysis.outputs.LOW_COUNT }}"
          echo "=================================="

          if [ "${{ steps.security-analysis.outputs.CRITICAL_COUNT }}" -gt 0 ]; then
            echo "‚ö†Ô∏è  WARNING: CRITICAL VULNERABILITIES DETECTED"
            echo "Please review security scan results before merging PR"
            echo "=================================="
          fi
