# Build stage - Alpine for minimal size with security fixes
FROM node:20.19.2-alpine3.21 AS builder
WORKDIR /app

# Security: Update Alpine packages first
RUN apk update && apk upgrade && \
    apk add --no-cache libc6-compat && \
    rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY src/ ./src/
COPY next.config.ts ./
COPY tsconfig.json ./

# Disable Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Build the Next.js application with standalone output for maximum optimization
RUN npm run build

# Production stage - Ultra-minimal Alpine runtime with security
FROM node:20.19.2-alpine3.21 AS production
WORKDIR /app

# Security: Update Alpine packages and install only runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache libc6-compat && \
    rm -rf /var/cache/apk/*

ENV NODE_ENV=production
ENV PORT=3000
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy only the built standalone application (massive size saving)
COPY --from=builder /app/public ./public

# Copy standalone Next.js output (includes only what's needed)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to non-root user
USER nextjs

EXPOSE 3000

# Start with Node.js directly (fastest startup)
CMD ["node", "server.js"]
